//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Meta/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
        ""name"": ""Controls"",
        ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""d1762160-787f-44e5-9899-024b3ef8a1be"",
            ""actions"": [
                {
                    ""name"": ""Trigger Inversion"",
                    ""type"": ""Button"",
                    ""id"": ""ab6b8c46-2ed1-488a-8e12-7040816cba03"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WASD"",
                    ""type"": ""Value"",
                    ""id"": ""f6b60795-56a5-49be-ba2f-95714545448b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""e83317d8-e75f-4a8c-a51a-ea341f540db2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire 2"",
                    ""type"": ""Button"",
                    ""id"": ""82e51df5-b0f6-4af5-b75d-016e844c9b80"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Enemy Rewind"",
                    ""type"": ""Button"",
                    ""id"": ""67265f73-709b-41d1-8fd9-a7ae677398c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Self Rewind"",
                    ""type"": ""Button"",
                    ""id"": ""c3110ef5-385a-4e33-84f8-3128c858fee6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Placeholder "",
                    ""type"": ""Button"",
                    ""id"": ""f921f4ec-ba2e-410e-a269-b1b974ae2396"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""79b489da-8fca-4187-abd0-d96613d8272e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Trigger Inversion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a63d2cb9-a26d-45e2-adbc-c5ff41daf8de"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Trigger Inversion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""51974a2c-bf75-4732-9abe-9f03f7dd8b0a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e9d9b50b-ef4a-4ca9-bc1e-7e98fc3b5c0d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""427e4cad-a302-4dbf-bd90-20e0ee653d49"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""13bccfbb-baba-4255-9dda-731ff8d71d18"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c417fa7c-c03c-4847-8136-c035abce4883"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""282c284f-ec7b-4a92-8c8c-93da06346805"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b83a6cff-4b8c-40ef-8754-67ecaaa7f088"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Fire 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""001259c4-47a3-449e-a216-f1af1bd113dd"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Enemy Rewind"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5bbb2e70-848d-4d4c-b8c4-5de2e9feee30"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Self Rewind"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2634a90-c62b-4a74-9248-12383235f118"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Placeholder "",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_TriggerInversion = m_Player.FindAction("Trigger Inversion", throwIfNotFound: true);
        m_Player_WASD = m_Player.FindAction("WASD", throwIfNotFound: true);
        m_Player_Fire = m_Player.FindAction("Fire", throwIfNotFound: true);
        m_Player_Fire2 = m_Player.FindAction("Fire 2", throwIfNotFound: true);
        m_Player_EnemyRewind = m_Player.FindAction("Enemy Rewind", throwIfNotFound: true);
        m_Player_SelfRewind = m_Player.FindAction("Self Rewind", throwIfNotFound: true);
        m_Player_Placeholder = m_Player.FindAction("Placeholder ", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_TriggerInversion;
    private readonly InputAction m_Player_WASD;
    private readonly InputAction m_Player_Fire;
    private readonly InputAction m_Player_Fire2;
    private readonly InputAction m_Player_EnemyRewind;
    private readonly InputAction m_Player_SelfRewind;
    private readonly InputAction m_Player_Placeholder;
    public struct PlayerActions
    {
        private @Controls m_Wrapper;
        public PlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @TriggerInversion => m_Wrapper.m_Player_TriggerInversion;
        public InputAction @WASD => m_Wrapper.m_Player_WASD;
        public InputAction @Fire => m_Wrapper.m_Player_Fire;
        public InputAction @Fire2 => m_Wrapper.m_Player_Fire2;
        public InputAction @EnemyRewind => m_Wrapper.m_Player_EnemyRewind;
        public InputAction @SelfRewind => m_Wrapper.m_Player_SelfRewind;
        public InputAction @Placeholder => m_Wrapper.m_Player_Placeholder;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @TriggerInversion.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTriggerInversion;
                @TriggerInversion.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTriggerInversion;
                @TriggerInversion.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTriggerInversion;
                @WASD.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWASD;
                @WASD.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWASD;
                @WASD.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWASD;
                @Fire.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFire;
                @Fire2.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFire2;
                @Fire2.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFire2;
                @Fire2.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFire2;
                @EnemyRewind.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEnemyRewind;
                @EnemyRewind.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEnemyRewind;
                @EnemyRewind.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEnemyRewind;
                @SelfRewind.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelfRewind;
                @SelfRewind.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelfRewind;
                @SelfRewind.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelfRewind;
                @Placeholder.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlaceholder;
                @Placeholder.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlaceholder;
                @Placeholder.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlaceholder;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TriggerInversion.started += instance.OnTriggerInversion;
                @TriggerInversion.performed += instance.OnTriggerInversion;
                @TriggerInversion.canceled += instance.OnTriggerInversion;
                @WASD.started += instance.OnWASD;
                @WASD.performed += instance.OnWASD;
                @WASD.canceled += instance.OnWASD;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @Fire2.started += instance.OnFire2;
                @Fire2.performed += instance.OnFire2;
                @Fire2.canceled += instance.OnFire2;
                @EnemyRewind.started += instance.OnEnemyRewind;
                @EnemyRewind.performed += instance.OnEnemyRewind;
                @EnemyRewind.canceled += instance.OnEnemyRewind;
                @SelfRewind.started += instance.OnSelfRewind;
                @SelfRewind.performed += instance.OnSelfRewind;
                @SelfRewind.canceled += instance.OnSelfRewind;
                @Placeholder.started += instance.OnPlaceholder;
                @Placeholder.performed += instance.OnPlaceholder;
                @Placeholder.canceled += instance.OnPlaceholder;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnTriggerInversion(InputAction.CallbackContext context);
        void OnWASD(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnFire2(InputAction.CallbackContext context);
        void OnEnemyRewind(InputAction.CallbackContext context);
        void OnSelfRewind(InputAction.CallbackContext context);
        void OnPlaceholder(InputAction.CallbackContext context);
    }
}
